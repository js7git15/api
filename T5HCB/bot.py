_from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import datetime
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
import os
import sys
from quart import Quart, render_template_string
import asyncio
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
START_TIME = datetime.datetime.now()

# –°–æ–∑–¥–∞–µ–º Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Quart(__name__)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
users = set()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = {1328776237, 5764625744}  # –ì–ª–∞–≤–∞ –∏ –ó–∞–º

# –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
user_choices = {}

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    current_time = datetime.datetime.now()
    uptime = current_time - START_TIME
    days = uptime.days
    hours = uptime.seconds // 3600
    minutes = (uptime.seconds % 3600) // 60
    seconds = uptime.seconds % 60
    return f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)"""
    uptime = get_uptime()
    status_message = (
        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(update.effective_user.id):
        status_message += f"\n\nüîß –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    await update.message.reply_text(status_message)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMINS

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    os.execv(sys.executable, ['python'] + sys.argv)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    message_text = ' '.join(context.args)
    if not message_text:
        await update.message.reply_text("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")
        return
    
    success_count = 0
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            success_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    users.add(update.effective_user.id)
    bot_info = await context.bot.get_me()
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="menu_send")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="menu_status")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(update.effective_user.id):
        keyboard.append([
            InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {bot_info.first_name}, –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "üîí –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/send - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/developer_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
        "/privacy - –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "‚ùóÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        "1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(update.effective_user.id):
        help_text += (
            "\n\nüîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        )
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="menu_send")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="menu_status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(help_text, reply_markup=reply_markup)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "menu_send":
        keyboard = [
            [InlineKeyboardButton("üë§ –ì–ª–∞–≤–∞", callback_data="target_1")],
            [InlineKeyboardButton("üë§ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", callback_data="target_2")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì© –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    elif query.data == "menu_help":
        await help_command(update, context)
    elif query.data == "menu_status":
        await status(update, context)
    elif query.data == "menu_admin":
        if is_admin(query.from_user.id):
            keyboard = [
                [InlineKeyboardButton("üì¢ Broadcast", callback_data="admin_broadcast")],
                [InlineKeyboardButton("üîÑ Restart", callback_data="admin_restart")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    elif query.data == "menu_main":
        await start(update, context)
    elif query.data == "admin_stats":
        if is_admin(query.from_user.id):
            uptime = get_uptime()
            await query.edit_message_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üÜî –í–∞—à ID: {query.from_user.id}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_admin")]
                ])
            )

async def send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("–ì–ª–∞–≤–∞", callback_data="target_1")],
        [InlineKeyboardButton("–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", callback_data="target_2")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ùì –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=reply_markup)

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "target_1":
        user_choices[user_id] = 1328776237  # ID –≥–ª–∞–≤—ã
        await query.edit_message_text("‚úÖ –í—ã–±—Ä–∞–Ω –ì–ª–∞–≤–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    elif query.data == "target_2":
        user_choices[user_id] = 5764625744  # ID –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è
        await query.edit_message_text("‚úÖ –í—ã–±—Ä–∞–Ω –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    elif query.data == "admin_restart":
        if is_admin(query.from_user.id):
            await query.edit_message_text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...")
            await restart(update, context)
    elif query.data == "admin_broadcast":
        if is_admin(query.from_user.id):
            await query.edit_message_text(
                "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_admin")]
                ])
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
    user_id = update.effective_user.id
    reply_to = update.message.reply_to_message

    if reply_to and "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in reply_to.text:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
                reply_to_message_id=reply_to.message_id
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞!")
        return

    if user_id not in user_choices:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /send")
        return

    target_id = user_choices[user_id]
    message_text = update.message.text

    try:
        await context.bot.send_message(
            chat_id=target_id,
            text=f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message_text}\n\n‚Ü©Ô∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    del user_choices[user_id]

async def developer_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ:\n\n"
        "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @GeorgijSoldativ\n"
        "üìß Email: –Ω–µ—Ç—É\n"
        "üåê GitHub: –ª–µ–Ω—å –∑–∞–≥—Ä—É–∂–∞—Ç—å\n\n"
    )

async def privacy_policy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    privacy_text = (
        "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º "
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è.\n\n"
        "1. **–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ "
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è "
        "–æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "2. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:** –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ "
        "–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "3. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ú—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, —á—Ç–æ–±—ã "
        "–∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "4. **–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏–∫–µ:** –ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç—É –ø–æ–ª–∏—Ç–∏–∫—É "
        "–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –µ–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "
        "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
    )
    
    await update.message.reply_text(privacy_text)

@app.route('/')
async def home():
    uptime = get_uptime()
    return await render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Telegram Bot</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #f5f5f5;
                }
                .container {
                    background-color: white;
                    padding: 20px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                h1 {
                    color: #2c3e50;
                }
                .status {
                    background-color: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 20px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.</p>
                
                <div class="status">
                    <h3>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</h3>
                    <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {{ uptime }}</p>
                    <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> {{ users_count }}</p>
                </div>
                
                <p>–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: <a href="https://t.me/{{ bot_name }}" target="_blank">@{{ bot_name }}</a></p>
            </div>
        </body>
        </html>
    """, uptime=uptime, users_count=len(users), bot_name="your_bot_username")

@app.route('/ping')
async def ping():
    return "pong"

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    application = Application.builder().token("7687849847:AAGTa_uuZNUyimY9lGyJncxlBSuXSMduLfo").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("send", send))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("developer_info", developer_info))
    application.add_handler(CommandHandler("privacy", privacy_policy))
    application.add_handler(CommandHandler("restart", restart))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(handle_menu, pattern="^menu_"))
    application.add_handler(CallbackQueryHandler(handle_choice, pattern="^(target_|admin_)"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
    bot_task = asyncio.create_task(run_bot())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_task = asyncio.create_task(app.run_task(host='0.0.0.0', port=8080))
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(bot_task, web_task)

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Replit
    from threading import Thread
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=lambda: asyncio.run(run_bot())).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    app.run(host='0.0.0.0', port=8080)